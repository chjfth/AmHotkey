; Note: If this file contains non-ASCII characters, you must saved it in UTF8 with BOM,
; in order for the Unicode characters to be recognized by Autohotkey engine.
;
AUTOEXEC_customize: 
	; Workaround for Autohotkey's ugly auto-exec feature. Don't delete above line.
	; IMPORTANT: It must be the *first* non-comment line so that 
	; Amhotkey_ScanAndLoadAutoexecLabels() can recognize this file to be a "module".
	; Even /* ... */ comment block can not be used above.
	;
	; After duplicating this file, you MUST change the above AUTOEXEC_xxx label to 
	; be a unique one, such as AUTOEXEC_foobar. Otherwise, AHK engine will assert 
	; error on loading AHK source file.

; Something to place here:
; * Customize these global vars according to your running machine:
; * Call the run-once functions.

global g_myglobal1 := 123

Init_MyCustomizedEnv()
; -- This function's body is defined after the first "return",
;    but we have to call it *before* the first "return".

; Something NOT to place here:
; * Hotkey definition, like 
;		#!t:: DoSomething()
; * Function definition.
;
; If you violate that "NOT" rule, .e.g, you define foo(){...} here, then all 
; `global` vars above will receive *empty* initial value.

;
return ; The first return in this ahk. It marks the End of auto-execute section.
;
; After this line, you can define hotkeys and functions, 
; or #Include somebody else's AHK partial file(s).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


Init_MyCustomizedEnv()
{
	; Write your initialization statements here.
}


; :::: Add your OWN hotkey definition below ::::


; RCtrl & RAlt:: Send {AppsKey}
; -- Workaround for the no AppsKey keyboard

